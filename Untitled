_PeekNext()_        Console.WriteLine("Tokens:");_        Console.Wr_        Console.WriteLine("Tokens:");_Wr_WriteLine_            Console.WriteLine(token.ToString());_Identifier_        if (keywards.TryGetValue(text, out var type))
        {
            AddToken(type);
        }
        else
        {
            AddToken(Identifier);
        }_KeyNotFoundException_Identifier_    private bool IsAlphaNumeric(char c)
    {
        return char.IsLetterOrDigit(c) || c == '_';
    }_IsLetterOrDigit_EqualEqual_Number_                if (IsDigit(c))
                {
                    while (IsDigit(Peek()))
                    {
                        Advance();
                    }
                    var value = Source.Substring(Start, Current - Start);
                    AddToken(Number, double.Parse(value));
                    return;
                }_            Lox.Error(line, "Unterminated string.");_IsAtEnd_IsAtEnd_                    AddToken(Slash);_IsAtEnd_GreaterEqual_Gre_GreaterEqual_LessEqual_EqualsEqual_                Lox.Error(Line, $"Unexpected character '{c}'");_Semicolon_Minus_Dot_Comma_Co_Comma_RightBrace_LeftBrace_RightParen_    private void AddToken(Token.TokenTypes type, object? literal = null)
    {
        string text = Source.Substring(Start, Current - Start);
        Tokens.Add(new Token(type, text, literal, Line));
    }_LeftParen_        Tokens.Add(new Token(Token.TokenTypes.EOF, "", null, Line));_    private bool IsAtEnd => Current >= Source.Length;_        Line = line_        Literal = literal,_        Lexeme = lexeme,_        Identifier, String, Number,_        Bang, BangEqual,_        // Single-character tokens._            HasError = false;_            Environment.Exit(65);_        Environment.Exit(0);_Environment_        Source = source;
